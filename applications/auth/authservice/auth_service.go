// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: auth.proto

package authservice

import (
	"context"

	"mcp/applications/auth/pb/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Claims                     = auth.Claims
	DeleteAccessTokenRequest   = auth.DeleteAccessTokenRequest
	DeleteAccessTokenResponse  = auth.DeleteAccessTokenResponse
	DeleteRefreshTokenRequest  = auth.DeleteRefreshTokenRequest
	DeleteRefreshTokenResponse = auth.DeleteRefreshTokenResponse
	IssueAccessTokenRequest    = auth.IssueAccessTokenRequest
	IssueAccessTokenResponse   = auth.IssueAccessTokenResponse
	IssueRefreshTokenRequest   = auth.IssueRefreshTokenRequest
	IssueRefreshTokenResponse  = auth.IssueRefreshTokenResponse
	VerifyAccessTokenRequest   = auth.VerifyAccessTokenRequest
	VerifyAccessTokenResponse  = auth.VerifyAccessTokenResponse
	VerifyRefreshTokenRequest  = auth.VerifyRefreshTokenRequest
	VerifyRefreshTokenResponse = auth.VerifyRefreshTokenResponse

	AuthService interface {
		// 颁发访问令牌
		IssueAccessToken(ctx context.Context, in *IssueAccessTokenRequest, opts ...grpc.CallOption) (*IssueAccessTokenResponse, error)
		// 删除访问令牌
		DeleteAccessToken(ctx context.Context, in *DeleteAccessTokenRequest, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error)
		// 验证访问令牌
		VerifyAccessToken(ctx context.Context, in *VerifyAccessTokenRequest, opts ...grpc.CallOption) (*VerifyAccessTokenResponse, error)
		// 颁发刷新令牌
		IssueRefreshToken(ctx context.Context, in *IssueRefreshTokenRequest, opts ...grpc.CallOption) (*IssueRefreshTokenResponse, error)
		// 删除刷新令牌
		DeleteRefreshToken(ctx context.Context, in *DeleteRefreshTokenRequest, opts ...grpc.CallOption) (*DeleteRefreshTokenResponse, error)
		// 验证刷新令牌
		VerifyRefreshToken(ctx context.Context, in *VerifyRefreshTokenRequest, opts ...grpc.CallOption) (*VerifyRefreshTokenResponse, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

// 颁发访问令牌
func (m *defaultAuthService) IssueAccessToken(ctx context.Context, in *IssueAccessTokenRequest, opts ...grpc.CallOption) (*IssueAccessTokenResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.IssueAccessToken(ctx, in, opts...)
}

// 删除访问令牌
func (m *defaultAuthService) DeleteAccessToken(ctx context.Context, in *DeleteAccessTokenRequest, opts ...grpc.CallOption) (*DeleteAccessTokenResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.DeleteAccessToken(ctx, in, opts...)
}

// 验证访问令牌
func (m *defaultAuthService) VerifyAccessToken(ctx context.Context, in *VerifyAccessTokenRequest, opts ...grpc.CallOption) (*VerifyAccessTokenResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.VerifyAccessToken(ctx, in, opts...)
}

// 颁发刷新令牌
func (m *defaultAuthService) IssueRefreshToken(ctx context.Context, in *IssueRefreshTokenRequest, opts ...grpc.CallOption) (*IssueRefreshTokenResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.IssueRefreshToken(ctx, in, opts...)
}

// 删除刷新令牌
func (m *defaultAuthService) DeleteRefreshToken(ctx context.Context, in *DeleteRefreshTokenRequest, opts ...grpc.CallOption) (*DeleteRefreshTokenResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.DeleteRefreshToken(ctx, in, opts...)
}

// 验证刷新令牌
func (m *defaultAuthService) VerifyRefreshToken(ctx context.Context, in *VerifyRefreshTokenRequest, opts ...grpc.CallOption) (*VerifyRefreshTokenResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.VerifyRefreshToken(ctx, in, opts...)
}
