// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: auth.proto

package server

import (
	"context"

	"mcp/applications/auth/internal/logic"
	"mcp/applications/auth/internal/svc"
	"mcp/applications/auth/pb/auth"
)

type AuthServiceServer struct {
	svcCtx *svc.ServiceContext
	auth.UnimplementedAuthServiceServer
}

func NewAuthServiceServer(svcCtx *svc.ServiceContext) *AuthServiceServer {
	return &AuthServiceServer{
		svcCtx: svcCtx,
	}
}

// 颁发访问令牌
func (s *AuthServiceServer) IssueAccessToken(ctx context.Context, in *auth.IssueAccessTokenRequest) (*auth.IssueAccessTokenResponse, error) {
	l := logic.NewIssueAccessTokenLogic(ctx, s.svcCtx)
	return l.IssueAccessToken(in)
}

// 删除访问令牌
func (s *AuthServiceServer) DeleteAccessToken(ctx context.Context, in *auth.DeleteAccessTokenRequest) (*auth.DeleteAccessTokenResponse, error) {
	l := logic.NewDeleteAccessTokenLogic(ctx, s.svcCtx)
	return l.DeleteAccessToken(in)
}

// 验证访问令牌
func (s *AuthServiceServer) VerifyAccessToken(ctx context.Context, in *auth.VerifyAccessTokenRequest) (*auth.VerifyAccessTokenResponse, error) {
	l := logic.NewVerifyAccessTokenLogic(ctx, s.svcCtx)
	return l.VerifyAccessToken(in)
}

// 颁发刷新令牌
func (s *AuthServiceServer) IssueRefreshToken(ctx context.Context, in *auth.IssueRefreshTokenRequest) (*auth.IssueRefreshTokenResponse, error) {
	l := logic.NewIssueRefreshTokenLogic(ctx, s.svcCtx)
	return l.IssueRefreshToken(in)
}

// 删除刷新令牌
func (s *AuthServiceServer) DeleteRefreshToken(ctx context.Context, in *auth.DeleteRefreshTokenRequest) (*auth.DeleteRefreshTokenResponse, error) {
	l := logic.NewDeleteRefreshTokenLogic(ctx, s.svcCtx)
	return l.DeleteRefreshToken(in)
}

// 验证刷新令牌
func (s *AuthServiceServer) VerifyRefreshToken(ctx context.Context, in *auth.VerifyRefreshTokenRequest) (*auth.VerifyRefreshTokenResponse, error) {
	l := logic.NewVerifyRefreshTokenLogic(ctx, s.svcCtx)
	return l.VerifyRefreshToken(in)
}
